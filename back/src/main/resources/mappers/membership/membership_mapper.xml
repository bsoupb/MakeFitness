<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="korit.com.make_fitness.mapper.MembershipMapper">

    <resultMap id="membershipResultMap" type="korit.com.make_fitness.entity.Membership">
        <id property="membershipId" column="membership_id"/>
        <result property="userId" column="user_id"/>
        <result property="promotionId" column="promotion_id"/>
        <result property="promotionSessionCount" column="promotion_session_count"/>
        <result property="promotionSessionTime" column="promotion_session_time"/>
        <result property="expiredDate" column="expired_date"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>

    <!-- 멤버십 가입자 추가(+결제건 같이 저장) -->
    <insert id="insert" keyProperty="membershipId" useGeneratedKeys="true">
        insert into membership_tb (
            user_id,
            promotion_id,
            promotion_session_count,
            promotion_session_time,
            expired_date,
            created_at,
            updated_at
        )
        select
            #{userId},
            pt.promotion_id,
            pt.promotion_session_count,
            pt.promotion_session_time,
            date_add(now(), interval pt.promotion_session_time month),
            now(),
            now()
        from
            promotion_tb pt
        where
            pt.promotion_id = #{promotionId}
    </insert>

    <!-- 세션 카운트 감소 -->
    <update id="updateSessionCount">
        update
            membership_tb
        set
            promotion_session_count = greatest(0, promotion_session_count - 1)
        where
            membership_id = #{membershipId} and promotion_session_count > 0
    </update>

    <!-- 세션 카운트 증가 -->
    <update id="restoreSessionCount">
        update
            membership_tb
        set
            promotion_session_count = promotion_session_count + 1
        where
            membership_id = #{membershipId}
    </update>

    <!-- userId로 멤버십 가입자 조회 -->
    <select id="findByUserId" resultMap="membershipResultMap">
        select
            *
        from
            user_tb
        where
            user_id = #{userId}
    </select>

    <!-- 멤버십 고유키를 userId로 조회 -->
    <select id="findUserIdByMembershipId" resultType="int">
        select
            user_id
        from
            membership_tb
        where
            membership_id = #{membershipId}
    </select>

    <!-- 개별 유저 role_name 을 CUSTOMER 로 변경 -->
    <update id="updateUserRoleToCustomer">
        update user_tb
        set
            role_name = 'CUSTOMER'
        where
            user_id = #{userId}
    </update>

    <!-- membership_tb에 등록된 모든 유저의 role_name을 CUSTOMER로 일괄 변경 -->
    <update id="bulkUpdateAllMembershipUserRolesToCustomer">
        update user_tb
        set
            role_name = 'CUSTOMER'
        where
            user_id in (
                select user_id from membership_tb
            )
    </update>

</mapper>
