<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="korit.com.make_fitness.mapper.MasterMapper">

    <!-- 매니저 응답 매핑 -->
    <resultMap id="ManagerResultMap" type="korit.com.make_fitness.dto.response.RespManagerDto">
        <id property="managerId" column="manager_id" />
        <result property="nickname" column="nickname" />
        <result property="gender" column="gender" />
        <result property="ph" column="ph" />
        <result property="classMemberCount" column="class_member_count" />
        <result property="classSessionCount" column="class_session_count" />
    </resultMap>

    <!-- 매출 응답 매핑 -->
    <resultMap id="SalesResultMap" type="korit.com.make_fitness.dto.response.RespSalesDto">
        <result column="date" property="date"/>
        <result column="total_amount" property="totalAmount"/>
        <result column="pt_total_amount" property="ptTotalAmount"/>
        <result column="plt_total_amount" property="pltTotalAmount"/>
        <result column="ht_total_amount" property="htTotalAmount"/>
    </resultMap>

    <!-- 유저 권한 변경 -->
    <update id="updateRoleName">
        update user_tb
        set role_name = #{roleName}
        where user_id = #{userId}
    </update>

    <!-- 매니저 목록 조회 -->
    <select id="findManager" resultMap="ManagerResultMap">
        select
            u.user_id as manager_id,
            u.nickname as nickname,
            u.gender as gender,
            u.ph as ph,
            count(distinct p.user_id) as class_member_count,
            count(distinct c.class_id) as class_session_count
        from
            user_tb u
        left join class_tb c on u.user_id = c.user_id
        and date_format(c.class_time, '%Y-%m') = date_format(#{classTime}, '%Y-%m')
        left join reservation_tb r on r.class_id = c.class_id
        left join membership_tb m on r.membership_id = m.membership_id
        left join pay_tb p on u.user_id = p.manager_id
        where
            u.role_name = 'ROLE_MANAGER'
        group by
            u.user_id
        order by
            u.user_id
    </select>

    <!-- 회원 목록 조회 (닉네임 검색 포함) -->
    <select id="findByNickname" resultType="korit.com.make_fitness.dto.response.RespMemberListDto">
        select
            u.nickname,
            u.user_id,
            u.ph,
            u.gender,
            u.created_at,
            u.role_name,
        coalesce(p.promotion_name, '없음') as promotionName,
        coalesce(m.promotion_session_count, 0) as promotionSessionCount,
        coalesce(m.expired_date, NOW()) as expiredDate
        from
            user_tb u
        left join membership_tb m on m.user_id = u.user_id
        left join promotion_tb p on m.promotion_id = p.promotion_id
        <where>
            <if test="name != null and name != ''">
                u.nickname like concat('%', #{name}, '%')
            </if>
        </where>
    </select>

    <!-- 날짜별 매출 조회 -->
    <select id="findByStartAndEndDate" resultMap="SalesResultMap">
        with recursive date_series AS (

            select
                date(str_to_date(#{startDate}, '%Y-%m-%d')) AS ds_date
            union all

            select
                ds_date + interval 1 DAY
            from
                date_series

            where not ds_date = str_to_date(#{endDate}, '%Y-%m-%d')
        )
        select
            ds.ds_date as date,
            ifnull(sum(pt.payment_amount), 0) as total_amount,
            sum(if(pmt2.promotion_id is not null, pt.payment_amount, 0)) as pt_total_amount,
            sum(if(pmt.promotion_id is not null, pt.payment_amount, 0)) as plt_total_amount,
            sum(if(pmt3.promotion_id is not null, pt.payment_amount, 0)) as ht_total_amount
        from
            date_series ds
            left outer join pay_tb pt on ds.ds_date = date(pt.created_at)
            left outer join promotion_tb pmt on pmt.promotion_id = pt.promotion_id and pmt.class_subject_id = 2
            left outer join promotion_tb pmt2 on pmt2.promotion_id = pt.promotion_id and pmt2.class_subject_id = 1
            left outer join promotion_tb pmt3 on pmt3.promotion_id = pt.promotion_id and pmt3.class_subject_id = 0
        group by
            ds.ds_date
        order by
            ds.ds_date;
    </select>

    <!-- 매월 매출 조회 -->
    <select id="findSales" resultMap="SalesResultMap">
        with recursive date_series AS (
            select
                date(str_to_date(#{startDate}, '%Y-%m-%d')) as ds_date
            union all

            select
                ds_date + interval 1 DAY
            from
                date_series

            where not ds_date = last_day(str_to_date(#{startDate}, '%Y-%m-%d'))
        )
        select
            ds.ds_date + interval 1 day as date,
            ifnull(sum(pt.payment_amount), 0) as total_amount,
            sum(if(pmt2.promotion_id is not null, pt.payment_amount, 0)) as pt_total_amount,
            sum(if(pmt.promotion_id is not null, pt.payment_amount, 0)) as plt_total_amount,
            sum(if(pmt3.promotion_id is not null, pt.payment_amount, 0)) as ht_total_amount
        from
            date_series ds
            left outer join pay_tb pt on ds.ds_date = date(pt.created_at)
            left outer join promotion_tb pmt on pmt.promotion_id = pt.promotion_id and pmt.class_subject_id = 2
            left outer join promotion_tb pmt2 on pmt2.promotion_id = pt.promotion_id and pmt2.class_subject_id = 1
            left outer join promotion_tb pmt3 on pmt3.promotion_id = pt.promotion_id and pmt3.class_subject_id = 0
        group by
            ds.ds_date
        order by
            ds.ds_date
    </select>


</mapper>
